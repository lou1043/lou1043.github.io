<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>lisp on Lou1043&#39;s blog</title>
    <link>https://ghost.lou.wiki/categories/lisp/</link>
    <description>Recent content in lisp on Lou1043&#39;s blog</description>
    <image>
      <url>https://ghost.lou.wiki/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ghost.lou.wiki/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Wed, 19 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ghost.lou.wiki/categories/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数字</title>
      <link>https://ghost.lou.wiki/post/%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ghost.lou.wiki/post/%E6%95%B0%E5%AD%97/</guid>
      <description>整数 可以用时2-36内任意一个数作为基数，形成进制 浮点数(与C相比，无双精度数double) 1500.0、15e2、15.0e2、1.5e3、.15e4都可以用来标识浮点数1500.0 特殊类型的值：NaN(not-a-number),可以用 (/ 0.0 0.0) 产生这个数 测试函数 整数类型测试函数是integerp 浮点数类型测试函数是floatp 数字类型测试用nunmberp 1 2 3 4 5 (integerp 1.) ;=&amp;gt;t (integerp 1.0) ;=&amp;gt;nil (floatp 1.) ;=&amp;gt;nil (floatp -0.0e+NaN) ;=&amp;gt;t (numberp 1) ;=&amp;gt;t 数的比较 由于赋值使用setq函数，所以=不再是一个赋值运算符，而是比较运算符 和其他语言类似，对于浮点数相等的测试是不可靠的，比如： 1 2 3 (setq foo (- (+ 1.0 1.0e-3) 1.0)) (setq bar 1.0e-3) (= foo bar) ;=&amp;gt;nil 所以如果要确定两个浮点数是否相同，需要在一定误差内进行比较 1 2 3 4 5 6 7 (defvar fuzz-factor 1.0e-6) (defun approx-equal (x y) (or (and (= x 0) (= y 0)) (&amp;lt; (/ (abs (- x y)) (max (abs x) (abs y))) fuzz-factor))) (approx-equal foo bar) 还有一个测试数字是否相等的函数eql，该函数不仅测试数字的值是否相等，还测试数字的类型是否一致，比如： 1 2 (= 1.</description>
    </item>
    
  </channel>
</rss>
