[{"content":" 整数 可以用时2-36内任意一个数作为基数，形成进制 浮点数(与C相比，无双精度数double) 1500.0、15e2、15.0e2、1.5e3、.15e4都可以用来标识浮点数1500.0 特殊类型的值：NaN(not-a-number),可以用 (/ 0.0 0.0) 产生这个数 测试函数 整数类型测试函数是integerp 浮点数类型测试函数是floatp 数字类型测试用nunmberp (integerp 1.) ;=\u0026gt;t (integerp 1.0) ;=\u0026gt;nil (floatp 1.) ;=\u0026gt;nil (floatp -0.0e+NaN) ;=\u0026gt;t (numberp 1) ;=\u0026gt;t 数的比较 由于赋值使用setq函数，所以=不再是一个赋值运算符，而是比较运算符 和其他语言类似，对于浮点数相等的测试是不可靠的，比如： (setq foo (- (+ 1.0 1.0e-3) 1.0)) (setq bar 1.0e-3) (= foo bar) ;=\u0026gt;nil 所以如果要确定两个浮点数是否相同，需要在一定误差内进行比较 (defvar fuzz-factor 1.0e-6) (defun approx-equal (x y) (or (and (= x 0) (= y 0)) (\u0026lt; (/ (abs (- x y)) (max (abs x) (abs y))) fuzz-factor))) (approx-equal foo bar) 还有一个测试数字是否相等的函数eql，该函数不仅测试数字的值是否相等，还测试数字的类型是否一致，比如： (= 1.0 1) ; =\u0026gt; t (eql 1.0 1) ; =\u0026gt; nil elisp没有+=，-=，/=，*=这样的常见符号，如果想实现类似功能的语句，只能用赋值函数setq来实现 /=符号被用于做不等于的测试了 数的转换 整数向浮点数转换 使用float函数 浮点数向整数转换 truncate转换成靠近0的整数 floor转换成最接近的不比本身大的整数 ceilling转换成最接近的不比本身小的整数 round四舍五入后的整数，即和它的差绝对值最小的整数 浮点数范围无穷大，整数有范围 数的运算 没有++和–操作，可以用setq赋值来代替++和– (setq foo 10) ; =\u0026gt; 10 (setq foo (1+ foo)) ; =\u0026gt; 11 (setq foo (1- foo)) ; =\u0026gt; 10 abs 取数的绝对值 有俩个取整的函数 一个是符号% %的第一个参数必须是整数 另一个是mod mod的第一个参数可以说整数也可以是浮点数 即使对相同的参数，两个函数也不一定有相同的返回值 (+ (% DIVIDEND DIVISOR) (* (/ DIVIDEND DIVISOR) DIVISOR)) 和DIVIDEND是相等的，而 (+ (mod DIVIDEND DIVOSIR) (* (floor DIVIDEND DIVOSOR) DIVISOR)) 和DIVIDEND是相等的 三角运算 sin cos tan asin acos atan 开方函数：sqrt 指数运算 exp是以e为底的指数运算 expt是可以指定底数的指数运算 log默认底数是e，也可以指定底数 log10 就是 (log x 10) logb是以2为底数运算，但返回一个整数，该函数用来计算数的位 随机数 random可以产生随机数，可以用 (random t) 来产生一个随机种子 虽然emacs每次启动后调用random总是产生相同的随机数，但在运行过程中，调用的次数不定，所以使用时还是不需要再调用一次 (random t) 来产生新的种子 函数列表 ;; 测试函数 (integerp OBJECT) (floatp OBJECT) (numberp OBJECT) (zerop NUMBER) (wholenump OBJECT) ;; 比较函数 (\u0026gt; NUM1 NUM2) (\u0026lt; NUM1 NUM2) (\u0026gt;= NUM1 NUM2) (\u0026lt;= NUM1 NUM2) (= NUM1 NUM2) (eql OBJ1 OBJ2) (/= NUM1 NUM2) ;; 转换函数 (float ARG) (truncate ARG \u0026amp;optional DIVISOR) (floor ARG \u0026amp;optional DIVISOR) (ceiling ARG \u0026amp;optional DIVISOR) (round ARG \u0026amp;optional DIVISOR) ;; 运算 (+ \u0026amp;rest NUMBERS-OR-MARKERS) (- \u0026amp;optional NUMBER-OR-MARKER \u0026amp;rest MORE-NUMBERS-OR-MARKERS) (* \u0026amp;rest NUMBERS-OR-MARKERS) (/ DIVIDEND DIVISOR \u0026amp;rest DIVISORS) (1+ NUMBER) (1- NUMBER) (abs ARG) (% X Y) (mod X Y) (sin ARG) (cos ARG) (tan ARG) (asin ARG) (acos ARG) (atan Y \u0026amp;optional X) (sqrt ARG) (exp ARG) (expt ARG1 ARG2) (log ARG \u0026amp;optional BASE) (logb ARG) ;; 随机数 (random \u0026amp;optional N) ;; 变量列表 most-positive-fixnum most-negative-fixnum ","permalink":"https://ghost.lou.wiki/post/%E6%95%B0%E5%AD%97/","summary":"整数 可以用时2-36内任意一个数作为基数，形成进制 浮点数(与C相比，无双精度数double) 1500.0、15e2、15.0e2、1.5e3、.15e4都可以用来标识浮点数1500.0 特殊类型的值：NaN(not-a-number),可以用 (/ 0.0 0.0) 产生这个数 测试函数 整数类型测试函数是integerp 浮点数类型测试函数是floatp 数字类型测试用nunmberp (integerp 1.) ;=\u0026gt;t (integerp 1.0) ;=\u0026gt;nil (floatp 1.) ;=\u0026gt;nil (floatp -0.0e+NaN) ;=\u0026gt;t (numberp 1) ;=\u0026gt;t 数的比较 由于赋值使用setq函数，所以=不再是一个赋值运算符，而是比较运算符 和其他语言类似，对于浮点数相等的测试是不可靠的，比如： (setq foo (- (+ 1.0 1.0e-3) 1.0)) (setq bar 1.0e-3) (= foo bar) ;=\u0026gt;nil 所以如果要确定两个浮点数是否相同，需要在一定误差内进行比较 (defvar fuzz-factor 1.0e-6) (defun approx-equal (x y) (or (and (= x 0) (= y 0)) (\u0026lt; (/ (abs (- x y)) (max (abs x) (abs y))) fuzz-factor))) (approx-equal foo bar) 还有一个测试数字是否相等的函数eql，该函数不仅测试数字的值是否相等，还测试数字的类型是否一致，比如： (= 1.","title":"数字"},{"content":"Hello World! Emacs and Hugo.\n","permalink":"https://ghost.lou.wiki/post/hello/","summary":"Hello World! Emacs and Hugo.","title":"Hello"}]